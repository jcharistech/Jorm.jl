var documenterSearchIndex = {"docs":
[{"location":"working_with_webapps/#Using-Jorm.jl-with-Oxygen.jl-Web-Framework","page":"Jorm.jl with WebApps","title":"Using Jorm.jl with Oxygen.jl Web Framework","text":"","category":"section"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"Oxygen.jl is a nice to use web framework in Julia. In this tutorial we will explore how to create a CRUD (Create, Read, Update, Delete) application using Oxygen.jl and Jorm.jl, you can follow these steps. ","category":"page"},{"location":"working_with_webapps/#Installation-and-Setup","page":"Jorm.jl with WebApps","title":"Installation and Setup","text":"","category":"section"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"First, ensure you have the necessary packages installed:","category":"page"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"using Pkg\nPkg.add(\"Oxygen\")\nPkg.add(\"Jorm\")\nPkg.add(\"SQLite\")\nPkg.add(\"HTTP\")\nPkg.add(\"StructTypes\")","category":"page"},{"location":"working_with_webapps/#Basic-App-Structure","page":"Jorm.jl with WebApps","title":"Basic App Structure","text":"","category":"section"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"We can setup a basic structure for our CRUD application using Oxygen.jl and Jorm.jl.","category":"page"},{"location":"working_with_webapps/#Define-Your-Model","page":"Jorm.jl with WebApps","title":"Define Your Model","text":"","category":"section"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"Define a struct to represent your data model:","category":"page"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"struct BlogPost\n    title::String\n    content::String\nend\n\n# Support JSON serialization and deserialization\nStructTypes.StructType(::Type{BlogPost}) = StructTypes.Struct()","category":"page"},{"location":"working_with_webapps/#Connect-to-the-Database","page":"Jorm.jl with WebApps","title":"Connect to the Database","text":"","category":"section"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"Use Jorm.jl to connect to the SQLite database and create the necessary table:","category":"page"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"using Jorm\n\nconnection_string = Jorm.SQLiteConnectionString(database_name=\"blog.db\")\ndb = Jorm.connect(connection_string)\ntb = Jorm.tablename(BlogPost)\nJorm.create_table(db, BlogPost, tb)","category":"page"},{"location":"working_with_webapps/#CRUD-Endpoints-with-Oxygen.jl","page":"Jorm.jl with WebApps","title":"CRUD Endpoints with Oxygen.jl","text":"","category":"section"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"Define the CRUD endpoints using Oxygen.jl:","category":"page"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"using Oxygen\n\n\n# Output Model\nstruct BlogPostOutput\n    id::Int # to handle autoincrement ID field\n    title::String\n    content::String\nend\n\n# Create a new blog post\n@post \"/api/v1/blogs/\" function(req::HTTP.Request)\n    data = Oxygen.json(req, BlogPost)\n    Jorm.insert!(db, BlogPost, data)\n    return data\nend\n\n# Read all blog posts\n@get \"/api/v1/blogs/\" function(req::HTTP.Request)\n    results = Jorm.read_all(db, BlogPost)\n    return Jorm.serialize_to_list(BlogPostOutput,results)\nend\n\n# Read one blog post by ID\n@get \"/api/v1/blogs/{blog_id}\" function(req::HTTP.Request, blog_id::Int)\n    result = Jorm.read_one(db, BlogPost, blog_id)\n    return Jorm.serialize_to_list(BlogPostOutput,result)\nend\n\n# Update an existing blog post\n@patch \"/api/v1/blogs/{blog_id}\" function(req::HTTP.Request, blog_id::Int)\n    data = Oxygen.json(req, BlogPost)\n    Jorm.update!(db, BlogPost, blog_id, data)\n    return data\nend\n\n# Delete a blog post by ID\n@delete \"/api/v1/blogs/{blog_id}\" function(req::HTTP.Request, blog_id::Int)\n    result = Jorm.delete!(db, BlogPost, blog_id)\n    return result\nend\n\n# Start the server\nserve(port=8001)","category":"page"},{"location":"working_with_webapps/#View-in-Browser","page":"Jorm.jl with WebApps","title":"View in Browser","text":"","category":"section"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"Once you start the server ,you can check your browser or any web client to see the API endpoints available on http://localhost:8001","category":"page"},{"location":"working_with_webapps/","page":"Jorm.jl with WebApps","title":"Jorm.jl with WebApps","text":"This is one of the ways that provides a clear and concise guide on how to set up and use the CRUD API with Oxygen.jl and Jorm.jl.","category":"page"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"CurrentModule = Jorm","category":"page"},{"location":"apireference/#API-Reference-for-Jorm.jl","page":"API Reference","title":"API Reference for Jorm.jl","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"Modules = [Jorm]","category":"page"},{"location":"apireference/#Jorm.RawSQL","page":"API Reference","title":"Jorm.RawSQL","text":"struct RawSQL  \n    value: String\n\nA struct to hold raw SQL Queries\n\n\n\n\n\n","category":"type"},{"location":"apireference/#Jorm.backup_postgresql_db","page":"API Reference","title":"Jorm.backup_postgresql_db","text":"backup_postgresql_db(db_name::String, host::String=\"localhost\", user::String=\"postgres\", password::String=\"\", backup_file::String=\"backup.sql\") \n# Usage\nbackup_postgresql_db(\"mydb\", \"localhost\", \"postgres\", \"mypassword\", \"backup.sql\")\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Jorm.backup_sqlite_db-Tuple{String, String}","page":"API Reference","title":"Jorm.backup_sqlite_db","text":"backup_sqlite_db(db::SQLite.DB, model) \n# usage\nbackup_sqlite_db(\"example.db\", \"example_backup.db\")\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.connect-Tuple{Jorm.PostgreSQLConnectionString}","page":"API Reference","title":"Jorm.connect","text":"connect(connection_string::String)\n    -> LibPQ.Connection\n\nEstablish a connection to an SQLite database using the provided connection string.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.connect-Tuple{SQLiteConnectionString}","page":"API Reference","title":"Jorm.connect","text":"connect(connection_string::String)\n    -> SQLite.DB\n\nEstablish a connection to an SQLite database using the provided connection string.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.create_table-Tuple{SQLite.DB, Type, Any}","page":"API Reference","title":"Jorm.create_table","text":"create_table(db::SQLite.DB, model, tableName)\nCreates a table in the database based on the model.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.delete!-Tuple{SQLite.DB, Any, Any}","page":"API Reference","title":"Jorm.delete!","text":"delete!(db::SQLite.DB, model, id)\nDelete data for a given model\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.delete_all!-Tuple{SQLite.DB, Any}","page":"API Reference","title":"Jorm.delete_all!","text":"delete_all(db::SQLite.DB, model) \nDeletes all data in the table for the given model\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.delete_db-Tuple{Jorm.PostgreSQLConnectionString}","page":"API Reference","title":"Jorm.delete_db","text":"delete_db(connection_string::Jorm.PostgreSQLConnectionString)\nDeletes or removes a an PostgreSQL database\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.delete_db-Tuple{SQLiteConnectionString}","page":"API Reference","title":"Jorm.delete_db","text":"delete_db(connection_string::Jorm.SQLiteConnectionString)\nDeletes or removes a an sqlite database\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.disconnect-Tuple{LibPQ.Connection}","page":"API Reference","title":"Jorm.disconnect","text":"disconnect(db::LibPQ.Connection)\n    -> Nothing\n\nClose the connection to the PostgreSQL database.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.disconnect-Tuple{SQLite.DB}","page":"API Reference","title":"Jorm.disconnect","text":"disconnect(db::SQLite.DB)\n    -> Nothing\n\nClose the connection to the SQLite database.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.drop_all_tables-Tuple{SQLiteConnectionString}","page":"API Reference","title":"Jorm.drop_all_tables","text":"drop_all_tables(connection_string::SQLiteConnectionString) \nDelete or Drop all tables for a given table\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.execute_query","page":"API Reference","title":"Jorm.execute_query","text":"execute_query(db::SQLite.DB, query::RawSQL, params::Vector{Any}=Any[]) \nReturns the executed sql\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Jorm.execute_query-2","page":"API Reference","title":"Jorm.execute_query","text":"execute_query(db::LibPQ.Connection, query::RawSQL, params::Vector{Any}=Any[]) \nReturns the executed sql\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Jorm.filter_by-Tuple{SQLite.DB, Any, Any}","page":"API Reference","title":"Jorm.filter_by","text":"filter_by(db::SQLite.DB, model, table_name; kwargs...) \nReturns the result of the given condition from the Database. This uses `SELECT`\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.filter_by_sql-Tuple{Any}","page":"API Reference","title":"Jorm.filter_by_sql","text":"filter_by_sql(table_name; kwargs...)\nFilter data by condition from the database\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.groupby_sql-Tuple{Any}","page":"API Reference","title":"Jorm.groupby_sql","text":"groupby_sql(table_name; group_by_columns, select_columns = \"*\", having_conditions = nothing, order_by_columns = nothing) \nReturns the result of the given condition from the Database. This uses `SELECT`\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.insert!-Tuple{SQLite.DB, Type, Any}","page":"API Reference","title":"Jorm.insert!","text":"insert!(db::SQLite.DB, model::Type, data) \nInsert or Add data to the DB for a given model\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.list_tables-Tuple{SQLiteConnectionString}","page":"API Reference","title":"Jorm.list_tables","text":"list_tables(connection_string::SQLiteConnectionString) \nReturns the list of tables in DB\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.ls_tables-Tuple{SQLiteConnectionString}","page":"API Reference","title":"Jorm.ls_tables","text":"ls_tables(connection_string::SQLiteConnectionString) \nReturns the list of tables in DB\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.read_all-Tuple{SQLite.DB, Any}","page":"API Reference","title":"Jorm.read_all","text":"read_all(db::SQLite.DB, model) \nReturns all data of a given model object\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.read_one-Tuple{SQLite.DB, Any, Any}","page":"API Reference","title":"Jorm.read_one","text":"read_one(db::SQLite.DB, model, id) \nReturns a given model object when given the ID\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.serialize_to_list-Tuple{Type, Any}","page":"API Reference","title":"Jorm.serialize_to_list","text":"serialize_to_list(outputmodel::Type,query)\nConvert an SQL Query result into serialized list\noutputmodel:: Same Model but with id::Int defined to handle auto generated ID \nfrom autoincrement\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.tablename-Tuple{Any}","page":"API Reference","title":"Jorm.tablename","text":"tablename(model) \nGenerate the table name for a given model. The table name is derived from the model's type name, converting it to lowercase and joining words with underscores.\n\nstruct MyModel end println(tablename(MyModel))  # Output: \"my_model\"\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.update!-Tuple{SQLite.DB, Any, Any, Any}","page":"API Reference","title":"Jorm.update!","text":"update!(db::SQLite.DB, model, id, data)\nUpdate data to the DB for a given model\n\n\n\n\n\n","category":"method"},{"location":"apireference/#Jorm.@raw_sql-Tuple{String}","page":"API Reference","title":"Jorm.@raw_sql","text":"macro raw_sql(v::String)\n    -> RawSQL\n\nCreate a RawSQL instance from a given SQL query string.\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Jorm","category":"page"},{"location":"#Jorm.jl","page":"Home","title":"Jorm.jl","text":"","category":"section"},{"location":"#A-Simple-Object-Relational-Mapping-Library-for-Julia","page":"Home","title":"A Simple Object-Relational Mapping Library for Julia","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Jorm.jl is a simple Julia package designed to simplify interactions between Julia code and databases. It provides a straightforward Object-Relational Mapping (ORM) layer, allowing you to work with databases using Julia structs and functions. The current database support include SQLite. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Future supporting database will include PostGreSQL, MySQL and more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use Jorm.jl as an ORM Layer with Oxygen.jl Framework to handle your database operations. The name Jorm.jl is a combination of Julia + ORM.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Jorm.jl, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Jorm\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Connecting-to-a-Database","page":"Home","title":"Connecting to a Database","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To connect to a SQLite database, use the connect function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"connection_string = Jorm.SQLiteConnectionString(database_name=\"example.db\")\ndb = Jorm.connect(connection_string)","category":"page"},{"location":"#Creating-Tables","page":"Home","title":"Creating Tables","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a table based on a Julia struct. We omit the id since it is by default an autoincrement but you can still access it via .id","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct BlogArticle\n    title::String\n    content::String\nend\n\ntb = Jorm.tablename(BlogArticle)\nJorm.create_table(db, BlogArticle, tb)","category":"page"},{"location":"#CRUD-Operations","page":"Home","title":"CRUD Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Perform basic CRUD (Create, Read, Update, Delete) operations:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Create a new record\ndata = BlogArticle(\"First Title\", \"My Blog Post\")\nJorm.insert!(db, BlogArticle, data)\n\n# Read all records\nresults = Jorm.read_all(db, BlogArticle)\nfor row in results\n    @test row.id == 1\nend\n\n# Update an existing record\nupdated_data = BlogArticle(\"First Title\", \"Updated Blog Post\")\nJorm.update!(db, BlogArticle, 1, updated_data)\n\n# Read one record by ID\nresult = Jorm.read_one(db, BlogArticle, 1)\nprintln(result)\n\n# Delete a record\nresult = Jorm.delete!(db, BlogArticle, 1)\nresult = Jorm.read_one(db, BlogArticle, 1)\n@test isempty(result)","category":"page"},{"location":"#Closing-the-Database-Connection","page":"Home","title":"Closing the Database Connection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Close the database connection and delete the database file if needed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Jorm.disconnect(db)\nJorm.delete_db(connection_string)","category":"page"},{"location":"#Other-Julia-ORM-Like-Libraries","page":"Home","title":"Other Julia ORM Like Libraries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Jorm.jl is a simple and young ORM tool for working with Web Apps and Databases, but it's not ideal for all applications. For users with more specialized needs, consider using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"SearchLight.jl\nFunnyORM.jl\nSQLite.jl\nLibPQ.jl\nWasabi.jl\netc\n","category":"page"},{"location":"#Questions","page":"Home","title":"Questions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If there is something you expect Jorm.jl to be capable of, but cannot figure out how to do, please reach out with questions. Additionally you can check out the introduction to Jorm.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for Jorm.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Jesus Saves @JCharisTech","category":"page"}]
}
