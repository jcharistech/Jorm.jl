var documenterSearchIndex = {"docs":
[{"location":"reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#Core","page":"API Reference","title":"Core","text":"","category":"section"},{"location":"reference/#Utils","page":"API Reference","title":"Utils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Jorm","category":"page"},{"location":"#Jorm","page":"Home","title":"Jorm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Jorm.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Jorm]","category":"page"},{"location":"#Jorm.RawSQL","page":"Home","title":"Jorm.RawSQL","text":"struct RawSQL  \n    value: String\n\nA struct to hold raw SQL Queries\n\n\n\n\n\n","category":"type"},{"location":"#Jorm.connect-Tuple{Jorm.PostgreSQLConnectionString}","page":"Home","title":"Jorm.connect","text":"connect(connection_string::String)\n    -> LibPQ.Connection\n\nEstablish a connection to an SQLite database using the provided connection string.\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.connect-Tuple{SQLiteConnectionString}","page":"Home","title":"Jorm.connect","text":"connect(connection_string::String)\n    -> SQLite.DB\n\nEstablish a connection to an SQLite database using the provided connection string.\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.create_table-Tuple{SQLite.DB, Any, Any}","page":"Home","title":"Jorm.create_table","text":"create_table(db::SQLite.DB, model, tableName)\nCreates a table in the database based on the model.\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.delete!-Tuple{SQLite.DB, Any, Any}","page":"Home","title":"Jorm.delete!","text":"delete!(db::SQLite.DB, model, id)\nDelete data for a given model\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.delete_all!-Tuple{SQLite.DB, Any}","page":"Home","title":"Jorm.delete_all!","text":"delete_all(db::SQLite.DB, model) \nDeletes all data in the table for the given model\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.disconnect-Tuple{LibPQ.Connection}","page":"Home","title":"Jorm.disconnect","text":"disconnect(db::LibPQ.Connection)\n    -> Nothing\n\nClose the connection to the PostgreSQL database.\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.disconnect-Tuple{SQLite.DB}","page":"Home","title":"Jorm.disconnect","text":"disconnect(db::SQLite.DB)\n    -> Nothing\n\nClose the connection to the SQLite database.\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.execute_query","page":"Home","title":"Jorm.execute_query","text":"execute_query(db::LibPQ.Connection, query::RawSQL, params::Vector{Any}=Any[]) \nReturns the executed sql\n\n\n\n\n\n","category":"function"},{"location":"#Jorm.execute_query-2","page":"Home","title":"Jorm.execute_query","text":"execute_query(db::SQLite.DB, query::RawSQL, params::Vector{Any}=Any[]) \nReturns the executed sql\n\n\n\n\n\n","category":"function"},{"location":"#Jorm.filter_by-Tuple{SQLite.DB, Any, Any}","page":"Home","title":"Jorm.filter_by","text":"filter_by(db::SQLite.DB, model, table_name; kwargs...) \nReturns the result of the given condition from the Database. This uses `SELECT`\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.filter_by_sql-Tuple{Any}","page":"Home","title":"Jorm.filter_by_sql","text":"filter_by_sql(table_name; kwargs...)\nFilter data by condition from the database\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.groupby_sql-Tuple{Any}","page":"Home","title":"Jorm.groupby_sql","text":"groupby_sql(table_name; group_by_columns, select_columns = \"*\", having_conditions = nothing, order_by_columns = nothing) \nReturns the result of the given condition from the Database. This uses `SELECT`\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.insert!-Tuple{SQLite.DB, Any, Any}","page":"Home","title":"Jorm.insert!","text":"insert!(db::SQLite.DB, model, data) \nInsert or Add data to the DB for a given model\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.list_tables-Tuple{SQLiteConnectionString}","page":"Home","title":"Jorm.list_tables","text":"list_tables(connection_string::SQLiteConnectionString) \nReturns the list of tables in DB\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.ls_tables-Tuple{SQLiteConnectionString}","page":"Home","title":"Jorm.ls_tables","text":"ls_tables(connection_string::SQLiteConnectionString) \nReturns the list of tables in DB\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.read_one-Tuple{SQLite.DB, Any, Any}","page":"Home","title":"Jorm.read_one","text":"read_one(db::SQLite.DB, model, id) \nReturns a given model object when given the ID\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.tablename-Tuple{Any}","page":"Home","title":"Jorm.tablename","text":"tablename(model) \nGenerate the table name for a given model. The table name is derived from the model's type name, converting it to lowercase and joining words with underscores.\n\nstruct MyModel end println(tablename(MyModel))  # Output: \"my_model\"\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.update!-Tuple{SQLite.DB, Any, Any, Any}","page":"Home","title":"Jorm.update!","text":"update!(db::SQLite.DB, model, id, data)\nUpdate data to the DB for a given model\n\n\n\n\n\n","category":"method"},{"location":"#Jorm.@raw_sql-Tuple{String}","page":"Home","title":"Jorm.@raw_sql","text":"macro raw_sql(v::String)\n    -> RawSQL\n\nCreate a RawSQL instance from a given SQL query string.\n\n\n\n\n\n","category":"macro"}]
}
